// ======================================================================
// layout.scss — container, grid columns, flex helpers
// Depends on: _variables.scss
// ======================================================================

@use "variables" as *;

// ---------------------------------------------
// Container
// ---------------------------------------------
.container {
  @include container; // centered, island width + safe gutters
}

// Optional variants you can apply directly on blocks if needed:
.container.narrow {
  width: ($island-width - 11.25rem);
  max-width: calc(100% - 2 * #{$container-gutter});
  margin-inline: auto;
}
.container.wide {
  width: 100%;
  max-width: none;
  padding-inline: $container-gutter;
}

// ---------------------------------------------
// Grid: 12-column CSS Grid
// ---------------------------------------------
$grid-columns: 12;
$grid-gap: $sp-7;
$grid-gap-lg: $sp-8;

.row {
  display: grid;
  grid-template-columns: repeat($grid-columns, minmax(0, 1fr));
  gap: $grid-gap;

  // Prevent children from forcing horizontal overflow
  > * { min-width: 0; }
}

@include mq-up($bp-lg) {
  .row { gap: $grid-gap-lg; }
}

/* Gap utilities */
.row.g-0   { gap: 0; }
.row.g-2   { gap: $sp-2; }
.row.g-4   { gap: $sp-4; }
.row.g-6   { gap: $sp-6; }
.row.g-7   { gap: $sp-7; }
.row.g-8   { gap: $sp-8; }
.row.g-10  { gap: $sp-10; }
.row.g-12  { gap: $sp-12; }

/* Axis-specific gap utilities */
.row.gx-0  { column-gap: 0; }
.row.gx-6  { column-gap: $sp-6; }
.row.gy-6  { row-gap: $sp-6; }

/* Auto-fit tiles (equal cards) */
.row-tiles {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(14rem, 1fr));
  gap: $grid-gap;
  > * { min-width: 0; }
}

// ---------------------------------------------
// Columns (span utilities)
// ---------------------------------------------
@mixin _span($n) { grid-column: span $n / span $n; }

@for $i from 1 through $grid-columns {
  .col-#{$i} { @include _span($i); }
}

/* Responsive spans */
@include mq-up($bp-sm) {
  @for $i from 1 through $grid-columns { .col-sm-#{$i} { @include _span($i); } }
}
@include mq-up($bp-md) {
  @for $i from 1 through $grid-columns { .col-md-#{$i} { @include _span($i); } }
}
@include mq-up($bp-lg) {
  @for $i from 1 through $grid-columns { .col-lg-#{$i} { @include _span($i); } }
}
@include mq-up($bp-xl) {
  @for $i from 1 through $grid-columns { .col-xl-#{$i} { @include _span($i); } }
}

/* Column alignment helpers */
.col-start  { justify-self: start; }
.col-center { justify-self: center; }
.col-end    { justify-self: end; }
.col-stretch{ justify-self: stretch; }

// ---------------------------------------------
// Flex helpers (lightweight)
// ---------------------------------------------
.flex        { display: flex; }
.inline-flex { display: inline-flex; }

.flex-row    { flex-direction: row; }
.flex-col    { flex-direction: column; }

.flex-wrap   { flex-wrap: wrap; }
.flex-nowrap { flex-wrap: nowrap; }

.items-start    { align-items: flex-start; }
.items-center   { align-items: center; }
.items-end      { align-items: flex-end; }
.items-stretch  { align-items: stretch; }

.justify-start  { justify-content: flex-start; }
.justify-center { justify-content: center; }
.justify-end    { justify-content: flex-end; }
.justify-between{ justify-content: space-between; }
.justify-around { justify-content: space-around; }
.justify-evenly { justify-content: space-evenly; }

.self-start   { align-self: flex-start; }
.self-center  { align-self: center; }
.self-end     { align-self: flex-end; }
.self-stretch { align-self: stretch; }

/* Orders (1..12) */
@for $i from 1 through 12 {
  .order-#{$i} { order: $i; }
}
.order-first { order: -999; }
.order-last  { order: 999; }

// ---------------------------------------------
// Layout primitives: stack / cluster
// ---------------------------------------------
.stack        { display: grid; gap: $sp-7; }
.stack-tight  { gap: $sp-6; }
.stack-loose  { gap: $sp-10; }

.cluster      { display: flex; flex-wrap: wrap; align-items: center; gap: $sp-7; }
.cluster-tight{ gap: $sp-6; }
.cluster-loose{ gap: $sp-10; }

// ---------------------------------------------
// Width + bleed helpers
// ---------------------------------------------
.w-full     { width: 100%; }
.max-w-none { max-width: none; }

// Safe bleed inside a container (doesn’t trigger page scroll)
.bleed      { margin-inline: calc(-1 * #{$container-gutter}); }
@include mq-up($bp-lg) {
  .bleed-lg { margin-inline: calc(-1 * #{$container-gutter}); }
}
